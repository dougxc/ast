# 
#  Copyright (C) 1997, Doug Simon
# 
#  See the file "LICENSE.TERMS" for information on usage and
#  redistribution of this file, and for a DISCLAIMER OF ALL
#  WARRANTIES.
# 
# 
#
# This file provides the names of all the SPARC8 opcodes that an application will use.
#
# Any line beginning with a # is considered a comment
#
# SPARC* opcodes

# instructions generated by the gnu compiler (for Sparc) that are not
# documented in the "SPARC Architecture Manual".
b
b,a
blu
blu,a
bgeu
bgeu,a

#  synthetic instructions 
cmp
jmp
call
tst
ret
retl
restore
save
set
not
neg
inc
inccc
dec
deccc
btst
bset
bclr
btog
clr
clrb
clrh
mov

#  load integer
ldsb
ldsh
ldub
lduh
ld
ldd

#  load floating point  
ldf
lddf
ldfsr

#  load coprocessor  
ldc
lddc
ldcsr

#  store integer  
stb
sth
st
std

#  store floating-point  
stf
stdf
stfsr

#  store coprocessor  
stc
stdc
stcsr
stdcq

#  atomic load-store unsigned byte  
ldstub

#  SWAP memory with memory  
swap

#  sethi  
sethi

#  nop  
nop

#  logical  
and
andcc
andn
andncc
or
orcc
orn
orncc
xor
xorcc
xnor
xnorcc

#  shift  
sll
srl
sra

#  add  
add
addcc
addx
addxcc

#  tagged add  
taddcc
taddcctv

#  subtract  
sub
subcc
subx
subxcc

#  tagged subtract  
tsubcc
tsubcctv

#  multiply step  
mulscc

#  multiply  
umul
smul
umulcc
smulcc

#  divide  
udiv
sdiv
udivcc
sdivcc

#  branch on integer condition codes 
ba
bn
bne
be
bg
ble
bge
bl
bgu
bleu
bcc
bcs
bpos
bneg
bvc
bvs

#  branch on integer condition codes with annul 
ba,a
bn,a
bne,a
be,a
bg,a
ble,a
bge,a
bl,a
bgu,a
bleu,a
bcc,a
bcs,a
bpos,a
bneg,a
bvc,a
bvs,a

#  branch on floating-point condition codes 
fba
fbn
fbu
fbg
fbug
fbl
fbul
fblg
fbne
fbe
fbue
fbge
fbuge
fble
fbule
fbo

#  branch on floating-point condition codes with annul 
fba,a
fbn,a
fbu,a
fbg,a
fbug,a
fbl,a
fbul,a
fblg,a
fbne,a
fbe,a
fbue,a
fbge,a
fbuge,a
fble,a
fbule,a
fbo,a

#  branch on coprocessor condition codes 
cba
cbn
cb3
cb2
cb23
cb1
cb13
cb12
cb123
cb0
cb03
cb02
cb023
cb01
cb013
cb012

#  branch on coprocessor condition codes with annul 
cba,a
cbn,a
cb3,a
cb2,a
cb23,a
cb1,a
cb13,a
cb12,a
cb123,a
cb0,a
cb03,a
cb02,a
cb023,a
cb01,a
cb013,a
cb012,a

#  jump and link 
jmpl

#  read state register
rd

#  write state register
wr

#  stbar 
stbar

#  unimplemented 
unimp

#  flush 
flush

#  Floating-point operate 
fpop1
fpop2

#  convert integer to floating-point 
fitos
fitod
fitoq

#  convert floating-point to integer 
fstoi
fdtoi
fqtoi

#  convert between floating-point formats 
fstod
fstoq
fdtos
fdtoq
fqtos
fqtod

#  floating-point move 
fmovs
fnegs
fabss

#  floating-point square root 
fsqrts
fsqrtd
fsqrtq

#  floating-point add and subtract 
fadds
faddq
faddd
fsubs
fsubd
fsubq

#  floating-point multiply and divide 
fmuls
fmuld
fmulq
fsmuld
fdmulq
fdivs
fdivd
fdivq

#  floating-point compare 
fcmps
fcmpd
fcmpq
fcmpes
fcmped
fcmpeq

#  coprocessor operate 
cpop1
cpop2
